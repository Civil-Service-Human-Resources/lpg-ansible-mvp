---
- hosts: group
  become: true
  gather_facts: alse
  roles:
    - docker
    - datadisk
  tags: default

#public containers

- hosts: group[0]
  gather_facts: false
  tasks:

    - name: create directories for nginx-proxy cetiicate
      file:
        path: "/datadisk/nginx/certs"
        owner: root
        group: root
        mode: 0770
        recurse: no
        state: directory
      become: yes
      tags: deault

    - name: Docker run lpg-learner-ui
      docker_container:
        name: lpg-ui
        hostname: lpg-learner-ui
        image: superroot/lpg-learner-ui:{{ lpglearnerui }}
        state: started
        recreate: no
        env:
          VIRTUAL_HOST: lpg.test.cshr.digital
          LETSENCRYPT_HOST: lpg.test.cshr.digital
          LETSENCRYPT_EMAIL: silvanod@kainos.com
      become: yes
      tags: lpg-ui

    - name: Docker run wso2
      docker_container:
        name: lpg-wso2
        hostname: lpg-wso2
        image: cshr/wso2-is:{{ wso2is }}
        state: started
        recreate: yes
        env:
          DATABASE_URL: jdbc:postgresql://data-01:5432/wso2is
          DATABASE_USER: "{{ db_user }}"
          DATABASE_PASSWORD: "{{ db_password }}"
          CARBON_PROTOCOL: https
          CARBON_HOST: identity.test.cshr.digital
          CARBON_PORT : 9443
          LPG_UI_URL: https://lpg.test.cshr.digital
          VIRTUAL_HOST: identity.test.cshr.digital
          VIRTUAL_PROTO: https
          LETSENCRYPT_HOST: identity.test.cshr.digital
          LETSENCRYPT_EMAIL: silvanod@kainos.com
      become: yes
      tags: wso2

    - name: Docker run nginx-proxy
      docker_container:
        name: nginx-proxy
        hostname: nginx-proxy
        image: jwilder/nginx-proxy
        volumes :
          - /var/run/docker.sock:/tmp/docker.sock:ro
          - /datadisk/nginx/certs:/etc/nginx/certs
          - /etc/nginx/vhost.d
          - /usr/share/nginx/html
        labels:
          com.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_proxy: ""
        state: started
        recreate: no
        published_ports:
          - 80:80
          - 443:443
      become: yes
      tags: nginx-proxy

    - name: Docker run letsencrypt-nginx-proxy-companion
      docker_container:
        name: nginx-letsencrypt
        hostname: nginx-letsencrypt
        image: jrcs/letsencrypt-nginx-proxy-companion
        volumes :
          - /var/run/docker.sock:/var/run/docker.sock:ro
          - /datadisk/nginx/certs:/etc/nginx/certs:rw
        volumes_from:
          - nginx-proxy
        state: started
        recreate: no
      become: yes
      tags: nginx-letsencrypt

# app containers

- hosts: group[1]
  gather_facts: false
  tasks:
    - name: Docker run learning-catalogue
      docker_container:
        name: learning-catalogue
        image: cshr/learning-catalogue:{{ learningcatalogue }}
        state: started
        recreate: no
      become: yes
      tags: learning-catalogue

# data containers

- hosts: group[2]
  gather_facts: false
  tasks:

    - name: Docker run postgresql
      docker_container:
        name: postgres
        image: postgres
        state: started
        published_ports:
          - 5432:5432
        recreate: no
        env:
          POSTGRES_PASSWORD: "{{ db_password }}"
      become: yes
      tags: postgres

    - name: Create docker dgraph network
      docker_network:
        name: dgraph
      become: yes
      tags: dgraph

    - name: Docker run dgraph zero
      docker_container:
        name: dgraphzero
        hostname: dgraphzero
        image: dgraph/dgraph
        state: started
        command: dgraph zero --port_offset -2000 --my=dgraphzero:5080
        networks:
          - name: dgraph
        published_ports:
          - 5080:5080
        recreate: no
      become: yes
      tags: dgraph

    - name: Docker run dgraph server
      docker_container:
        name: dgraphserver
        hostname: dgraphserver
        image: dgraph/dgraph
        state: started
        command: dgraph server --my=dgraphserver:7080 --memory_mb=1048 --zero=dgraphzero:5080
        networks:
          - name: dgraph
        published_ports:
          - 7080:7080
          - 8080:8080
        recreate: no
      become: yes
      tags: dgraph

    - name: Docker run dgraph ui
      docker_container:
        name: dgraphui
        image: dgraph/dgraph
        state: started
        command: dgraph-ratel -port 8081
        published_ports:
          - 8081:8081
        recreate: no
      become: yes
      tags: dgraph
